name: Build
on:
  push:
    branches:
      - 'dev_cosmeb'
      #trigger
env:
  REPOSITORY: cosmeb/portal-dev
  AWS_REGION: ap-southeast-1
  HOOK_URL: http://dev.cosmeb.com:9000/hooks/portal-dev

jobs:
  Build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Set outputs
        id: vars
        run: |
          REF="${GITHUB_REF##*/}"
          SHORT_COMMIT=`git rev-parse HEAD| cut -c 1-7`
          echo "IMAGE_TAG=$REF-$SHORT_COMMIT" >> $GITHUB_OUTPUT
      - name: Build app
        run: |
          yarn install
          yarn build:dev

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-session-name: GitHubAction
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        id: dockerized
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.vars.outputs.IMAGE_TAG }}
        run: |
          echo $IMAGE_TAG
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f .github/utils/Dockerfile .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

    outputs:
      IMAGE_TAG: ${{ steps.vars.outputs.IMAGE_TAG }}
      REGISTRY: ${{ steps.login-ecr.outputs.registry }}

  Deploy-dev:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - name: Trigger webhook
        env:
          IMAGE_TAG: ${{ needs.Build.outputs.IMAGE_TAG }}
        run: |
          curl ${HOOK_URL}?image_tag=${IMAGE_TAG}
          echo "Trigger done"
